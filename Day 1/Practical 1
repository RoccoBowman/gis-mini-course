---
title: "Practical 1: Basics of Spatial Data in R"
author: "Rocco Bowman"
date: "5/31/2021"
output: 
  prettydoc::html_pretty:
    theme: cayman
    highlight: github
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "C:/Users/bowma/Desktop/GIS Mini-course")
getwd()
```
## 1.0 Introduction

This first lesson will introduce/refresh you on the basics of loading, manipulating, and saving spatial data in **R**. As always, there are more than one way to do things in R so consider the following code (and all subsequent lessons) as *one* way to do things. 

## 1.1 Find some data

*You can use the data included in the course materials or you may find your own data. Put your data in the "data" folder to access it.*

First we should establish our **working directory**. An easy way to do this is to select the console, press **crtl** + **shift** + **H**, choose your course folder, then copy-paste the output into your script.

This code sets your working directory (setwd = "set working directory"). You can use the key combo above in the console to select your course folder then copy paste the command into a script if needed.
```{r}
setwd("C:/Users/bowma/Desktop/GIS Mini-course") 
```

Now we can look inside our directory folders to find the name of the data we want to use. You may already know in which case you can skip this step.

This code allows you to look inside your working directory folder and see sub-directories or sub-folders. The "." in the output denotes your directory folder

```{r}
list.dirs()
```
This code lists all the files currently present in your data folder within your working directory (".").
You can replace "data" with scripts to see inside that folder as well.
```{r}
list.files("./data")
```
## 1.2 Loading Data

We will want the New York City boundary **(nybb)** file as well as the the **demographic** data. The demographic data is one **.csv** file but **nybb** has many files. We want to select just **nybb.shp**. This refers to the actual geometries of the boundaries but by loading in a **.shp** we also take advantage of the other files to specify its attribute and projection information.

Let's load the demographic data first using **read.csv()** and look at the first five rows using **head()**.
```{r}
demographic <- read.csv("data/demographic.csv")

head(demographic, n = 5)
```
## 1.3 Loading Spatial Data and Quick Visuals

Now let's load in the New York boundary shapefile. We will need to first load in the **sf** package which allows us to easily use "simple feature" geometries or vector data.

```{r}
# If you do not have sf yet, you can enter 'install.packages("sf")' in the console.
library(sf)
```

Now with **sf** loaded, we can use **st_read** to load the shapefile.
```{r}
boundaries <- st_read("data/nybb.shp")
```

Let's check the first five rows of your shapefile. We now see a **geometry** column which tells R how to draw the vector shapes. We can also check the CRS or "Coordinate Reference System" of the shapefile.
```{r}
head(boundaries)

st_crs(boundaries)
```
We can easily take a quick look at a shapefile by calling **plot()** and entering the shapefile object as the argument. As we see, base **R** will plot as many attributes as possible which can be useful if you want to immediately see multiple variables at the same time.

```{r}
plot(boundaries)
```

We can also plot just the borough names (**BoroName**) by following the object with the variable name in square brackets.

```{r}
plot(boundaries["BoroName"])
```

## 1.4 Customizable Plotting

Base R plotting is OK, but it can be better. The plotting package **ggplot2** is a standard for **R** users due to the ability to more fully customize plots and, in this case, maps. First, load the **ggplot2** package then call **ggplot()** to create a ggplot object. Next, call **geom_sf()** which is a special geometry call to plot sf objects.

We can plot just the shape of the shapefile by entering no arguments for **geom_sf**. We can also specify border color with **color =** and fill with **fill =**.

```{r}
library(ggplot2)

ggplot(data = boundaries) +
  geom_sf(color = "black", fill = NA)
```
We can also plot specific variables of interest by replacing **fill =** with a variable name such as **BoroName**. Because **BoroName** is a character vector, ggplot will assume it is a factor and color it on the map much like a political map where adjacent polygons are displayed in discernible colors.

```{r}
ggplot(data = boundaries) +
  geom_sf(aes(fill = BoroName))
```


## 1.5 Joining Demographic Data to Boundaries

We can also join tabular and spatial data together. This is particularly useful when non-spatialized data can be joined to spatial data based on a common variable such as countries, counties, provinces, etc. In this case, our New York City boundaries do not have any demographic data attached. So we can use the **tidyverse** package and **left_join()** to join the tabular demographic data to the shapefile by borough.

```{r}
library(tidyverse) 

join <- boundaries %>%
  left_join(demographic, by = c("BoroName" = "borough"))

head(join, n = 5)
```

## 1.6 Visualizing Continuous Variables
Much like we did with a factor variable, we can also use **ggplot** to map our newly joined demographic data. Here, we map the number of housing units per borough.

```{r}
ggplot(data = join) +
  geom_sf(aes(fill = housing_units))
```

## 1.7 Layering Spatial Data

Spatial data and the capabilities of GIS allow for us to layer different shapefiles and rasters on top of each other. The next unit will explain how to do this in analytical ways but for now we can simply map layers on top of one another in the form of a map. We can load and overlay housing rentals on top of our NYC boundaries to see where they are.

```{r}
rentals <- read.csv("data/rent_observations.csv")
head(rentals)
```

We will need to convert the rental points to a point shapefile. To do this, we can once again use the **sf** package and the **st_as_sf()** function. We simply feed in our data frame object, the coordinate variables in our data frame (X then Y), then define a CRS.

```{r}
rent_points <- st_as_sf(rentals, coords = c("long","lat"), crs = 4326)

plot(rent_points)
```

Just to make sure we can plot the shapefiles over one another, we need to make sure the CRS of *both* shapefiles is the same; otherwise, the data will not overlap. We can use a simple logical expression to check if they are the same.

```{r}
st_crs(rent_points) == st_crs(boundaries)
```

If we return **FALSE** then we should probably make the projections the same using **st_transform**.

```{r}
st_transform(rent_points, crs = st_crs(boundaries))
```
If we run the crs test again, we should get **TRUE** now.

```{r}
st_crs(rent_points) == st_crs(boundaries)
```

Now we can use **ggplot** and multiple **geom_sf()** calls to layer our new map. The package will draw the first layer first then each layer after that. This means we should plot our boundaries first, then our points so that they will appear on top.

```{r}
ggplot() + 
  geom_sf(data = boundaries) +
  geom_sf(data = rent_points, color = "red") 
```
## 1.8 Filtering/Subsetting Spatial Data

Much like how we used the **dplyr** verb **left_join** as part of the larger **tidyverse** package, we can used **filter** to extract rows of interest. This will be useful since our rental observation points are only located in Manhattan.

```{r}
manhattan <- boundaries %>%
  filter(BoroName == "Manhattan")

ggplot() + 
  geom_sf(data = manhattan) +
  geom_sf(data = rent_points, color = "red")
```


Now we can plot our overlaid spatial data and color the rental points based on their rent values on a continuous scale.
```{r}
ggplot() + 
  geom_sf(data = manhattan) +
  geom_sf(data = rent_points, aes(color = rent_points$rentvalue)) 
```


## Conclusion

Today we covered some basic functions that will help you take advantage of spatial data in **R**! Like any data analysis, knowing how to read, inspect, explore, manipulate, and visualize data is crucial. We did not cover absolutely everything in this lesson but learning more about **tidyverse**, especially **dplyr** will help you with data cleaning and manipulation.

You can find out about more **dplyr** verbs to select, subset, and more [here](https://dplyr.tidyverse.org/).

If you would like to know more about how to customize plots and maps in **ggplot** you can look [here](https://ggplot2.tidyverse.org/).

Our next lesson will cover common functions of GIS software including spatial relationships, spatial joins, aggregation, and more.
